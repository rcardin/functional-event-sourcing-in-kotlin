/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package `in`.rcard.fes

import arrow.core.Either
import arrow.core.NonEmptyList
import arrow.core.nonEmptyListOf
import arrow.core.raise.either
import arrow.core.toNonEmptyListOrNull
import `in`.rcard.fes.PortfolioCommand.CreatePortfolio
import `in`.rcard.fes.PortfolioCommand.PortfolioCommandWithPortfolioId.BuyStocks
import `in`.rcard.fes.PortfolioCommand.PortfolioCommandWithPortfolioId.ClosePortfolio
import `in`.rcard.fes.PortfolioCommand.PortfolioCommandWithPortfolioId.SellStocks
import `in`.rcard.fes.PortfolioError.PortfolioIsClosed
import `in`.rcard.fes.PortfolioError.PortfolioNotAvailable
import `in`.rcard.fes.PortfolioError.PriceNotAvailable
import `in`.rcard.fes.PortfolioEvent.PortfolioClosed
import `in`.rcard.fes.PortfolioEvent.StocksSold

// class PortfolioDecider(
//    decide: (PortfolioCommand, Portfolio) -> Either<PortfolioError, NonEmptyList<PortfolioEvent>>,
//    evolve: (Portfolio, PortfolioEvent) -> Portfolio,
//    initialState: Portfolio,
// )

fun decide(command: PortfolioCommand, portfolio: Portfolio): Either<PortfolioError, NonEmptyList<PortfolioEvent>> =
    when (command) {
        is CreatePortfolio -> createPortfolio(portfolio, command)
        is BuyStocks -> buyStocks(portfolio, command)
        is SellStocks -> sellStocks(portfolio, command)
        is ClosePortfolio -> closePortfolio(portfolio, command)
    }

private fun createPortfolio(
    portfolio: Portfolio,
    command: CreatePortfolio,
) = either {
    if (portfolio.isAvailable()) {
        raise(PortfolioError.PortfolioAlreadyExists(portfolio.id))
    }
    nonEmptyListOf(
        PortfolioEvent.PortfolioCreated(
            PortfolioId("${command.userId}-1"),
            command.userId,
            command.amount,
        ),
    )
}

private fun buyStocks(
    portfolio: Portfolio,
    command: BuyStocks,
): Either<PortfolioError, NonEmptyList<PortfolioEvent>> = either {
    if (!portfolio.isAvailable()) {
        raise(PortfolioNotAvailable(command.portfolioId))
    }
    if (portfolio.isClosed()) {
        raise(PortfolioIsClosed(command.portfolioId))
    }
    val requestedFundsForStocks = command.price * command.quantity
    val availableFunds = portfolio.availableFunds()
    if (availableFunds < requestedFundsForStocks) {
        raise(PortfolioError.InsufficientFunds(portfolio.id, requestedFundsForStocks, availableFunds))
    }
    nonEmptyListOf(
        PortfolioEvent.StocksPurchased(
            command.portfolioId,
            command.stock,
            command.quantity,
            command.price,
        ),
    )
}

private fun sellStocks(
    portfolio: Portfolio,
    command: SellStocks,
): Either<PortfolioError, NonEmptyList<PortfolioEvent>> = either {
    if (portfolio.isClosed()) {
        raise(PortfolioIsClosed(command.portfolioId))
    }
    val ownedStocks = portfolio.ownedStocks(command.stock)
    if (ownedStocks < command.quantity) {
        raise(
            PortfolioError.NotEnoughStocks(
                portfolio.id,
                command.stock,
                command.quantity,
                ownedStocks,
            ),
        )
    }

    nonEmptyListOf(
        StocksSold(
            command.portfolioId,
            command.stock,
            command.quantity,
            command.price,
        ),
    )
}

fun closePortfolio(
    portfolio: Portfolio,
    command: ClosePortfolio,
): Either<PortfolioError, NonEmptyList<PortfolioEvent>> = either {
    if (portfolio.isClosed()) {
        raise(PortfolioIsClosed(command.portfolioId))
    }
    val stocksSoldEvents: List<StocksSold> = portfolio.ownedStocks().map {
        StocksSold(
            command.portfolioId,
            it.stock,
            it.quantity,
            command.prices[it.stock] ?: raise(
                PriceNotAvailable(command.portfolioId, it.stock),
            ),
        )
    }
    (stocksSoldEvents + PortfolioClosed(command.portfolioId)).toNonEmptyListOrNull() ?: nonEmptyListOf(
        PortfolioClosed(
            command.portfolioId,
        ),
    )
}

fun evolve(portfolio: Portfolio, event: PortfolioEvent): Portfolio = portfolio + event

fun main() {
    println("Hello World!")
}
